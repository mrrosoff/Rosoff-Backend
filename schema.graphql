type User {
	name: String
	email: String!
	avatar: String
	username: String
	password: String
	containers: [Container!]!
}

type Container {
	id: ID!
	name: String!
	status: ContainerStatus!
	createdAt: DateTime!
    image: Image!
	hardware: ContainerHardware!
	networks: [ContainerNetwork]!
}

enum ContainerStatus {
	RUNNING
	STOPPED
}

type Image {
	id: ID!
	name: String!
}

type ContainerHardware {
	cpusetCpus: String
	cpusetMems: String
	cpuPercent: Int
	cpuShares: Int
	cpuPeriod: Int
	memory: Int
	memorySwap: Int
	memoryReservation: Int
	portBindings: PortBinding
	privileged: Boolean
}

type PortBinding {
	port: String
}

type ContainerNetwork {
	name: String
	gateway: String
	ipAddress: String
	macAddress: String
}

type GoogleLoginReponsePayload {
	token: AuthorizationToken
	redirectPath: String
}

scalar DateTime
scalar AuthorizationToken

type Query {
	selfLookup: User
	containerLookup(id: ID!): Container
}

type Mutation {
	createUser(email: String!, password: String!, username: String!): AuthorizationToken!
	loginUser(email: String, username: String, password: String!): AuthorizationToken
	googleLogin(token: ID!): GoogleLoginReponsePayload
	editUser(name: String, email: String, avatar: String, username: String, password: String): User!
	sendResetPasswordEmail(email: String, username: String): Boolean
	createContainer: Container!
	editContainer(id: ID!, name: String): Container
	deleteContainer(id: ID!): Container
}

type Subscription {
	newContainerLog(id: ID!): String
}
